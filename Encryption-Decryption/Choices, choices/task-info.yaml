type: edu
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }

    }
  learner_created: false
- name: output.txt
  visible: true
  text: 111122223333
  learner_created: true
- name: src/Main.java
  visible: true
  text: |
    import java.io.File;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            String mode = "";
            String finalMessage = "";
            String messageFromData = "";
            String messageFromIn = "";
            String filePathToWrite = "";
            boolean isOutArgument = true;
            boolean isData = false;
            boolean isIn = false;
            int key = 0;
            for (int i = 0; i < args.length - 1; i++) {
                if ("-mode".equals(args[i])) {
                    if ("-key-data-in-out".contains(args[i + 1])) {
                        mode = "enc";
                    } else {
                        mode = args[i + 1];
                    }
                } else if ("-key".equals(args[i])) {
                    if ("-mode-data-in-out".contains(args[i + 1])) {
                        key = 0;
                    } else {
                        key = Integer.parseInt(args[i + 1]);
                    }
                } else if ("-data".equals(args[i])) {
                    if ("-mode-key-in-out".contains(args[i + 1])) {
                        messageFromData = "";
                    } else {
                        messageFromData = args[i + 1];
                    }
                } else if ("-in".equals(args[i])) {
                    if ("-mode-key-data-out".contains(args[i + 1])) {
                        messageFromIn = "";
                    } else {
                        File file = new File(args[i + 1]);
                        try (Scanner scanner = new Scanner(file)) {
                            while (scanner.hasNext()) {
                                messageFromIn += scanner.nextLine();
                            }
                        } catch (IOException e) {
                            System.out.println("Error");
                        }
                    }
                } else if ("-out".equals(args[i])) {
                    if ("-mode-key-in-data".contains(args[i + 1])) {
                        isOutArgument = false;
                    } else {
                        filePathToWrite = args[i + 1];
                    }
                }
            }

            for (int j = 0; j < args.length - 1; j++) {
                if ("-data".equals(args[j]) && !"-mode-key-in-out".contains(args[j + 1])) {
                    isData = true;
                } else if ("-in".equals(args[j]) && !"-mode-key-data-out".contains(args[j + 1])) {
                    isIn = true;
                }
            }

            finalMessage = isIn && !isData ? messageFromIn : messageFromData;

            boolean flag = true;
            while (flag) {
                switch (mode) {
                    case "enc":
                        encrypt(finalMessage, key, isOutArgument, filePathToWrite);
                        flag = false;
                        break;
                    case "dec":
                        decrypt(finalMessage, key, isOutArgument, filePathToWrite);
                        flag = false;
                        break;
                    default:
                        break;
                }
            }
        }

        private static void encrypt(String finalMessage, int key,
                                    boolean isOutArgument, String filePathToWrite) {

            char[] array = finalMessage.toCharArray();
            for (int i = 0; i < array.length; i++) {
                array[i] = (char) (array[i] + key);
            }
            if (!isOutArgument) {
                System.out.println(String.valueOf(array));
            } else {
                File file = new File(filePathToWrite);
                try (FileWriter writer = new FileWriter(file)) {
                    writer.write(array);
                } catch (IOException e) {
                    System.out.println("Error");
                }
            }
        }

        private static void decrypt(String finalMessage, int key,
                                    boolean isOutArgument, String filePathToWrite) {

            char[] array = finalMessage.toCharArray();
            for (int i = 0; i < array.length; i++) {
                array[i] = (char) (array[i] - key);
            }
            if (!isOutArgument) {
                System.out.println(String.valueOf(array));
            } else {
                File file = new File(filePathToWrite);
                try (FileWriter writer = new FileWriter(file)) {
                    writer.write(array);
                } catch (IOException e) {
                    System.out.println("Error");
                }
            }
        }
    }
  learner_created: true
- name: src/UnicodeEncryption.java
  visible: true
  learner_created: true
- name: src/EncAndDecStrategy.java
  visible: true
  learner_created: true
- name: src/EncodingDecoding.java
  visible: true
  learner_created: true
- name: src/ShiftEncryption.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5392#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 18 Oct 2022 15:45:04 UTC"
record: 6
